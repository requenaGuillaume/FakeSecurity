
INACCEPTABLE (au moins un des points suivants) :
● failles								=> NON, je ne penses pas
● erreur 500								=> NON, je ne penses pas
● plus de 2 langages par page (ex: sql, php et html dans la même page)	=> NON (exception generation de PDF et Mail, html + css + php, pas le choix)


LÉGER (tous les points suivants) :
● structures de contrôles (conditions et boucles)					=> OUI (plein, exemple conditions src/controllers/Connexion.php lignes 16, 56, 58, 60, exemple boucle src/templates/account.phtml lignes 200, 231 etc...)
● utilisation de empty ou isset								=> OUI (plein, exemple src/controllers/Connexion.php lignes 56, 58, 83, 87 etc...)
● utilisation de $_POST et $_GET							=> OUI (POST src/controllers/Connexion.php lignes 56 & 58, GET src/Notifications.php lignes 19, 20, 31 etc...)
● pas de traitement dans les vues							=> C'est a dire ? conditions et boucles dans certains templates
● utilisation d'un framework avec peu de code personnel accepté (mais non obligatoire)	=> NON


OK (au moins un des points suivants) :
● Templating (avec un moteur de templates ou en php natif, syntaxe alternative)	=> OUI, je penses, a vérifier
● POO	=> OUI (voir les controllers, models et Access.php, Database.php etc)


BIEN (tous les points suivants) :
● architecture MVC parfaite						=> OUI, je penses
● utilisation du typage (types nullables, return type)			=> OUI (exemple toutes les méthodes src/controllers/Controllers.php etc...)
● type hinting (class, self, array, callable, bool, float, int, string)	=> OUI (exemple toutes les méthodes src/controllers/Controllers.php etc...)
● une bonne gestion des erreurs						=> OUI, je penses


TB (au moins un des points suivants) :
● POO avancée (ex : héritage, namespace, classe abstraite, propriétés typées, etc)	=> OUI (src/models/Model.php class abstraite + héritage + namespace, pareil pour controllers, src/Access.php class Static, pas de propriété typées)
● création d’un micro-framework sur-mesure pour le projet				=> NON, je ne penses pas
● composer										=> NON
